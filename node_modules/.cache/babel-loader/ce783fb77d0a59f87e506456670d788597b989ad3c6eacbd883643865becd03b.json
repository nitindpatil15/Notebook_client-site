{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nitin Patil\\\\OneDrive\\\\Desktop\\\\reactjs\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesinitial = [];\n  let [notes, setNotes] = useState(notesinitial);\n\n  // Get all Notes\n  const getnotes = async () => {\n    // API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes/`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n  // Add Note\n  const addnote = async (title, description, tag) => {\n    // API call\n    try {\n      const response = await fetch(`${host}/api/notes/addnotes/`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\"\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      const json = response.json();\n      console.log(json);\n    } catch (error) {\n      alert(\"Error in Adding Note\");\n      console.log(error, \": Failed to Fetch API\");\n    }\n    //  Logic\n    console.log(\"Adding a new Note\");\n    notes = {\n      _id: \"65ace945efa3cd56802523a73\",\n      user: \"65a93c428cabca1953d1676b\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2024-01-21T09:52:05.956Z\",\n      __v: 0\n    };\n    setNotes(notesinitial.concat(notes));\n  };\n  // delete Note\n  const deletenote = async (id, title, description, tag) => {\n    // API call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\"\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    // logic\n    console.log(\"Deleting the note with id: \" + id);\n    const newnotes = notes.filter(notes => {\n      return notes._id !== id;\n    });\n    setNotes(newnotes);\n  };\n  // Update Note\n  const updatenote = async (id, title, description, tag) => {\n    // API call\n    try {\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\"\n        },\n        body: JSON.stringify({\n          id,\n          title,\n          description,\n          tag\n        })\n      });\n      const json = response.json();\n      console.log(json);\n    } catch (error) {\n      alert(\"Error in updating the Note\");\n      console.log(error, \": Failed to Fetch API\");\n    }\n    // Logic\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addnote,\n      deletenote,\n      updatenote,\n      getnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"lCpSlwx1esUeipe+iG9Pc2Zry6g=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesinitial","notes","setNotes","getnotes","response","fetch","method","headers","json","console","log","addnote","title","description","tag","body","JSON","stringify","error","alert","_id","user","date","__v","concat","deletenote","id","newnotes","filter","updatenote","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Nitin Patil/OneDrive/Desktop/reactjs/inotebook/src/context/NoteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesinitial = [];\r\n  let [notes, setNotes] = useState(notesinitial);\r\n\r\n  // Get all Notes\r\n  const getnotes = async () => {\r\n    // API call\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes/`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\",\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n    setNotes(json);\r\n  };\r\n  // Add Note\r\n  const addnote = async (title, description, tag) => {\r\n    // API call\r\n    try {\r\n    const response = await fetch(`${host}/api/notes/addnotes/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\",\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    const json = response.json();\r\n    console.log(json)\r\n  } catch (error) {\r\n    alert(\"Error in Adding Note\");\r\n    console.log(error ,\": Failed to Fetch API\")\r\n  }\r\n    //  Logic\r\n    console.log(\"Adding a new Note\");\r\n    notes = {\r\n      _id: \"65ace945efa3cd56802523a73\",\r\n      user: \"65a93c428cabca1953d1676b\",\r\n      title: title,\r\n      description: description,\r\n      tag: tag,\r\n      date: \"2024-01-21T09:52:05.956Z\",\r\n      __v: 0,\r\n    };\r\n    setNotes(notesinitial.concat(notes));\r\n  };\r\n  // delete Note\r\n  const deletenote = async (id, title, description, tag) => {\r\n    // API call\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\",\r\n      },\r\n    });\r\n     const json = response.json();\r\n     console.log(json)\r\n    // logic\r\n    console.log(\"Deleting the note with id: \" + id);\r\n    const newnotes = notes.filter((notes) => {\r\n      return notes._id !== id;\r\n    });\r\n    setNotes(newnotes);\r\n  };\r\n  // Update Note\r\n  const updatenote = async (id, title, description, tag) => {\r\n    // API call\r\n    try {\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVhOTNjNDI4Y2FiY2ExOTUzZDE2NzZiIn0sImlhdCI6MTcwNTU4OTg1MX0.LGM0aaLY2kp5FMu3SJ4S-VaPrGoKfxEMwZhilG1U1gg\",\r\n      },\r\n      body: JSON.stringify({ id, title, description, tag }),\r\n    });\r\n     const json = response.json();\r\n     console.log(json)\r\n       \r\n    } catch (error) {\r\n      alert(\"Error in updating the Note\");\r\n      console.log(error ,\": Failed to Fetch API\")\r\n    }\r\n    // Logic\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if (element._id === id) {\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tag = tag;\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <NoteContext.Provider\r\n      value={{ notes, setNotes, addnote, deletenote, updatenote, getnotes }}\r\n    >\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\nexport default NoteState;\r\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EACvB,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACO,YAAY,CAAC;;EAE9C;EACA,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,2BAA0B,EAAE;MAC/DO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EACV;MACJ;IACF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBN,QAAQ,CAACM,IAAI,CAAC;EAChB,CAAC;EACD;EACA,MAAMG,OAAO,GAAG,MAAAA,CAAOC,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IACjD;IACA,IAAI;MACJ,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,sBAAqB,EAAE;QAC1DO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EACV;QACJ,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEL,KAAK;UAAEC,WAAW;UAAEC;QAAI,CAAC;MAClD,CAAC,CAAC;MACF,MAAMN,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,KAAK,CAAC,sBAAsB,CAAC;MAC7BV,OAAO,CAACC,GAAG,CAACQ,KAAK,EAAE,uBAAuB,CAAC;IAC7C;IACE;IACAT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChCT,KAAK,GAAG;MACNmB,GAAG,EAAE,2BAA2B;MAChCC,IAAI,EAAE,0BAA0B;MAChCT,KAAK,EAAEA,KAAK;MACZC,WAAW,EAAEA,WAAW;MACxBC,GAAG,EAAEA,GAAG;MACRQ,IAAI,EAAE,0BAA0B;MAChCC,GAAG,EAAE;IACP,CAAC;IACDrB,QAAQ,CAACF,YAAY,CAACwB,MAAM,CAACvB,KAAK,CAAC,CAAC;EACtC,CAAC;EACD;EACA,MAAMwB,UAAU,GAAG,MAAAA,CAAOC,EAAE,EAAEd,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IACxD;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwB2B,EAAG,EAAC,EAAE;MACjEpB,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EACV;MACJ;IACF,CAAC,CAAC;IACD,MAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAClB;IACAC,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGgB,EAAE,CAAC;IAC/C,MAAMC,QAAQ,GAAG1B,KAAK,CAAC2B,MAAM,CAAE3B,KAAK,IAAK;MACvC,OAAOA,KAAK,CAACmB,GAAG,KAAKM,EAAE;IACzB,CAAC,CAAC;IACFxB,QAAQ,CAACyB,QAAQ,CAAC;EACpB,CAAC;EACD;EACA,MAAME,UAAU,GAAG,MAAAA,CAAOH,EAAE,EAAEd,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IACxD;IACA,IAAI;MACJ,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwB2B,EAAG,EAAC,EAAE;QACjEpB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EACV;QACJ,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAES,EAAE;UAAEd,KAAK;UAAEC,WAAW;UAAEC;QAAI,CAAC;MACtD,CAAC,CAAC;MACD,MAAMN,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAElB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,KAAK,CAAC,4BAA4B,CAAC;MACnCV,OAAO,CAACC,GAAG,CAACQ,KAAK,EAAE,uBAAuB,CAAC;IAC7C;IACA;IACA,KAAK,IAAIY,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG7B,KAAK,CAAC8B,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAME,OAAO,GAAG/B,KAAK,CAAC6B,KAAK,CAAC;MAC5B,IAAIE,OAAO,CAACZ,GAAG,KAAKM,EAAE,EAAE;QACtBM,OAAO,CAACpB,KAAK,GAAGA,KAAK;QACrBoB,OAAO,CAACnB,WAAW,GAAGA,WAAW;QACjCmB,OAAO,CAAClB,GAAG,GAAGA,GAAG;MACnB;IACF;EACF,CAAC;EACD,oBACEnB,OAAA,CAACH,WAAW,CAACyC,QAAQ;IACnBC,KAAK,EAAE;MAAEjC,KAAK;MAAEC,QAAQ;MAAES,OAAO;MAAEc,UAAU;MAAEI,UAAU;MAAE1B;IAAS,CAAE;IAAAgC,QAAA,EAErEtC,KAAK,CAACsC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACzC,EAAA,CA7GIF,SAAS;AAAA4C,EAAA,GAAT5C,SAAS;AA8Gf,eAAeA,SAAS;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}